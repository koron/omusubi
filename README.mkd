# Simple Compression for Array

[![Build Status](https://travis-ci.org/koron/simple-compression.png?branch=master)](https://travis-ci.org/koron/simple-compression)
[![Coverage Status](https://coveralls.io/repos/koron/simple-compression/badge.png?branch=master)](https://coveralls.io/r/koron/simple-compression)

WIP

## Sample code

```java
// Main class
import net.kaoriya.qb.simple_compression.LongBitPacking;

import java.nio.LongBuffer;

// (blah blah blah...) how to compress.

public LongBuffer compress(long[] src) {
  LongBitPacking p = new LongBitPacking();
  LongBuffer srcBuf = LongBuffer.wrap(src);
  LongBuffer dstBuf = LongBuffer.allocate(/*estimated length*/);
  p.compress(srcBuf, dstBuf);
  return dstBuf;
}

// (blah blah blah...) How to decompress.

public LongBuffer decompress(long[] src) {
  LongBitPacking p = new LongBitPacking();
  LongBuffer srcBuf = LongBuffer.wrap(src);
  LongBuffer dstBuf = LongBuffer.allocate(/*estimated length*/);
  p.decompress(srcBuf, dstBuf);
  return dstBuf;
}
```

`LongBitPacking#compress` と `LongBitPacking#decompress()` の出力先に
自動で領域の再確保をする `LongBuffer` を作って指定すれば
`LongBuffer#allocate` での出力サイズ計算は不要になります。
