# Omusubi - Nums compression library.

[![Build Status](https://travis-ci.org/koron/omusubi.png?branch=master)](https://travis-ci.org/koron/omusubi)
[![Coverage Status](https://coveralls.io/repos/koron/omusubi/badge.png?branch=master)](https://coveralls.io/r/koron/omusubi)

Omusubi is compression library for Java.  It compress array of numbers.
Currently support only int and long array.


## Sample code

Using IntDZBP (int delta-zigzag binary packing).

```java
import net.kaoriya.omusubi.IntDZBP;

// Copress.
byte[] compressed = IntDZBP.toBytes(new int[] { 0, 1, 2, ... });

// Decompress.
int[] decompressed = IntDZBP.fromBytes(compressed);
```

Using LongDZBP (long delta-zigzag binary packing).

```java
import net.kaoriya.omusubi.LongDZBP;

// Copress.
byte[] compressed = LongDZBP.toBytes(new long[] { 0, 1, 2, ... });

// Decompress.
long[] decompressed = LongDZBP.fromBytes(compressed);
```


## Formats

### IntDZBP

#### Header

```
  +0  +1  +2  +3  +4  +5  +6  +7  +8  +9  +A  +B  +C  +D  +E  +F
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|    Length     |  First value  |                               |
+---+---+---+---+---+---+---+---+                               |
|                           (Chunks)                            |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
```

*   Length: length of original array.
*   First value: First value of original array.
*   Chunks: compressed chunks.

#### Chunk

```
  +0  +1  +2  +3  +4  +5  +6  +7  +8  +9  +A  +B  +C  +D  +E  +F
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|    Header     |                                               |
+---+---+---+---+                                               |
|                          (Block * 4)                          |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
```

*   Header: holding length of each 4 blocks.
*   Block: cotains compressed data, size is multiply of 4 bytes. (0-128 bytes)
    * A block have 32 int values. So a chunk have 128 (=32*4) int values.

### LongDZBP

#### Header

```
  +0  +1  +2  +3  +4  +5  +6  +7  +8  +9  +A  +B  +C  +D  +E  +F
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|            Length             |          First value          |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|                           (Chunks)                            |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
```

*   Length: length of original array.
*   First value: First value of original array.
*   Chunks: compressed chunks.

#### Chunk

```
  +0  +1  +2  +3  +4  +5  +6  +7  +8  +9  +A  +B  +C  +D  +E  +F
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|            Header             |                               |
+---+---+---+---+---+---+---+---+                               |
|                          (Block * 4)                          |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
```

*   Header: holding length of each 4 blocks.
*   Block: cotains compressed data, size is multiply of 8 bytes. (0-128 bytes)
    *   A block have 16 long values.  So a chunk have 64 (=16*4) long values.

## Utility methods

*   IntDZBP
    *   IntDZBP#toBytes
    *   IntDZBP#fromBytes
*   LongDZBP
    *   LongDZBP#toBytes
    *   LongDZBP#fromBytes
*   IntBitPacking
    *   IntBitPacking#toBytes
    *   IntBitPacking#fromBytes
*   LongBitPacking
    *   LongBitPacking#toBytes
    *   LongBitPacking#fromBytes
*   IntJustCopy
    *   IntJustCopy#toBytes
    *   IntJustCopy#fromBytes
*   LongJustCopy
    *   LongJustCopy#toBytes
    *   LongJustCopy#fromBytes
